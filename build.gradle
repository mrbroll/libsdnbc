apply plugin: 'c'
apply plugin: 'cpp'

if (System.properties['os.name'].toLowerCase().contains('windows')) {
    // clear swap files
} else {
    ('find . -name "*.swp" | xargs rm -f').execute()
}

model {
    buildTypes {
        debug
        release
    }
    repositories {
        libs (PrebuiltLibraries) {
            gtest {
                headers.srcDir './deps/gtest/include'
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile  = file('./deps/gtest/build/libgtest.a')
                }
            }
        }
    }
}

binaries.all {
    if (buildType == buildTypes.debug) {
        cCompiler.args '-g'
        cppCompiler.args '-g'
    }
}

libraries {
    sdnbc {}
}

def gtestBuildSDNBC = new File('./deps/gtest/build')

executables {
    sdnbc_test {
        binaries.all {
            lib libraries.sdnbc.static
            lib library: 'gtest', linkage: 'static'
            if (!gtestBuildSDNBC.exists()) {
                tasks.withType(CppCompile) { 
                    dependsOn buildSDNBCGtest
                }
            }
            tasks.withType(LinkExecutable) {
                doLast {
                    if (outputFile.exists()) {
                        println 'Run Tests with "gradle sdnbcTests"\n'
                    }
                }
            }
        }
    }
}

task buildSDNBCGtest (type: Exec) {
    workingDir './deps/gtest'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        // DO WINDOWS COMPILATION
    } else {
        commandLine './build.sh'
    }
}

task sdnbcTests << {
    def testName = 'sdnb_test'
    def binDir = project.buildDir.getAbsolutePath() + '/binaries/sdnbc_testExecutable/'
    def releaseTest = new File(binDir + 'release/' + testName)
    def debugTest = new File(binDir + 'debug/' + testName)
    if (releaseTest.exists()) {
        def proc = releaseTest.getAbsolutePath().execute()
        println "Running Release Build Tests...\n${proc.text}"
    } else if (debugTest.exists()) {
        def proc = debugTest.getAbsolutePath().execute()
        println "Running Debug Build Tests...\n${proc.text}"
    } else {
        println "You need to build a test executable first!\n"
    }
}

task wrapper (type: Wrapper) {
    gradleVersion = '2.2'
}
